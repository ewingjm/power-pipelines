parameters:
  - name: packageProject
    displayName: Package project
    type: string
  - name: unitTestsProject
    displayName: Unit tests project
    type: string
    default: ''
  - name: additionalProjects
    displayName: Additional projects
    type: object
    default: []
  - name: artifactName
    displayName: Artifact name
    type: string
  - name: unmanagedSolution
    displayName: Unmanaged solution
    type: string
    default: ''
  - name: sonarCloudServiceConnection
    displayName: SonarCloud service connection
    type: string
    default: ''
  - name: sonarCloudOrganisation
    displayName: SonarCloud organisation
    type: string
    default: ''
  - name: sonarCloudProjectKey
    displayName: SonarCloud project key
    type: string
    default: $(Build.Repository.Name)
  - name: sonarCloudProjectName
    displayName: SonarCloud project name
    type: string
    default: $(Build.Repository.Name)
  - name: sonarCloudProperties
    displayName: SonarCloud properties
    type: string
    default: |
      sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/**/coverage.opencover.xml
      sonar.inclusions=src/**/*.*
  - name: sonarCloudPublish
    displayName: SonarCloud publish
    type: boolean
    default: true
  - name: dotNetSdkVersion
    displayName: .NET SDK version
    type: string
    default: 6.x
  - name: jobName
    displayName: Job name
    type: string
    default: BuildPackage
  - name: dependsOn
    displayName: Depends on
    type: object
    default: []

jobs:
  - job: ${{ parameters.jobName }}
    displayName: Build package
    variables:
      BuildPackage.OutputDirectory: $(Build.ArtifactStagingDirectory)/package
      BuildPackage.PackageProject: ${{ parameters.packageProject }}
      ${{ if parameters.unitTestsProject }}:
        BuildPackage.UnitTests.Project: ${{ parameters.unitTestsProject }}
      ${{ if parameters.unmanagedSolution }}:
        BuildPackage.UnmanagedSolution: ${{ parameters.unmanagedSolution }}
      ${{ if parameters.sonarCloudServiceConnection }}:
        BuildPackage.SonarCloud.ProjectKey: ${{ parameters.sonarCloudProjectKey }}
        BuildPackage.SonarCloud.ProjectName: ${{ parameters.sonarCloudProjectName }}
        BuildPackage.SonarCloud.Organisation: ${{ parameters.sonarCloudOrganisation }}
      BuildPackage.DotNetSdk.Version: ${{ parameters.dotNetSdkVersion }}
    ${{ if parameters.dependsOn }}:
      dependsOn: ${{ parameters.dependsOn }}
    steps:
      - checkout: self
        fetchDepth: 0
      - task: gitversion/setup@0
        displayName: Install GitVersion
        inputs:
          versionSpec: '5.x'
      - task: gitversion/execute@0
        displayName: Execute GitVersion
        inputs:
          useConfigFile: true
          configFilePath: GitVersion.yml
      - task: UseDotNet@2
        displayName: Install .NET SDK $(BuildPackage.DotNetSdk.Version)
        inputs:
          version: $(BuildPackage.DotNetSdk.Version)
      - ${{ if parameters.sonarCloudServiceConnection }}:
        - task: SonarCloudPrepare@1
          displayName: Prepare SonarCloud analysis
          inputs:
            SonarCloud: ${{ parameters.sonarCloudServiceConnection }}
            organization: $(BuildPackage.SonarCloud.Organisation)
            projectKey: $(BuildPackage.SonarCloud.ProjectKey)
            projectName: $(BuildPackage.SonarCloud.ProjectName)
            extraProperties: ${{ parameters.sonarCloudProperties }}
      - task: DotNetCoreCLI@2
        displayName: Build package
        inputs:
          command: publish
          projects: $(BuildPackage.PackageProject)
          publishWebProjects: false
          zipAfterPublish: false
          modifyOutputPath: false
          arguments: >
            -c Release
            -o "$(BuildPackage.OutputDirectory)"
      - ${{ if parameters.unitTestsProject }}:
        - task: DotNetCoreCLI@2
          displayName: Run unit tests
          inputs:
            command: test
            arguments: --collect:"XPlat Code Coverage"
            publishTestResults: true
            projects: $(BuildPackage.UnitTests.Project)
        - task: PublishCodeCoverageResults@1
          displayName: Publish code coverage report
          inputs:
            codeCoverageTool: Cobertura
            failIfCoverageEmpty: false
            summaryFileLocation: $(Agent.TempDirectory)/**/coverage.cobertura.xml
      - ${{ each additionalProject in parameters.additionalProjects }}:
        - task: DotNetCoreCLI@2
          displayName: Build ${{ additionalProject.artifactName }}
          inputs:
            command: build
            projects: ${{ additionalProject.project }}
            arguments: >
              -c Release
              -o "$(Build.ArtifactStagingDirectory))/${{ additionalProject.artifactName }}"
        - publish: $(Build.ArtifactStagingDirectory))/${{ additionalProject.artifactName }}
          artifact: ${{ additionalProject.artifactName }}
          displayName: Publish ${{ additionalProject.artifactName }}
      - ${{ if parameters.unmanagedSolution }}:
        - powershell: |
            Write-Host "##vso[task.setvariable variable=BuildPackage.UnmanagedSolutionProject]$(Get-ChildItem "$env:BUILDPACKAGE_UNMANAGEDSOLUTION.cdsproj" -File -Recurse | Select-Object -ExpandProperty FullName)"
          displayName: Find $(BuildPackage.UnmanagedSolution) project 
        - powershell: |
            $solution = Get-ChildItem "$env:BUILDPACKAGE_UNMANAGEDSOLUTION.zip" -File -Recurse
            Write-Host "##vso[task.setvariable variable=BuildPackage.SolutionOutputDirectory]$($solution.Directory.FullName)/"
          displayName: Find $(BuildPackage.UnmanagedSolution) output location 
          workingDirectory: $(BuildPackage.OutputDirectory)
        - task: DotNetCoreCLI@2
          displayName: Build unmanaged $(BuildPackage.UnmanagedSolution) solution
          inputs:
            command: build
            projects: $(BuildPackage.UnmanagedSolutionProject)
            arguments: >
              -c Debug
              -o "$(BuildPackage.SolutionOutputDirectory)"
              /p:SolutionVersionStrategy=none
      - powershell: |
          $fileName = [System.IO.Path]::GetFileNameWithoutExtension($env:BUILDPACKAGE_PACKAGEPROJECT)
          Write-Host "##vso[task.setvariable variable=PackageFile;isOutput=true]$fileName.dll"
        displayName: Get package file
        name: GetPackageFile
      - powershell: |
          Write-Host "##vso[task.setvariable variable=CommitHash;isOutput=true]$($env:BUILD_SOURCEVERSION.Substring(0, 7))"
        displayName: Get short commit hash
        name: GetShortCommitHash
      - publish: $(BuildPackage.OutputDirectory)
        artifact: ${{ parameters.artifactName }}
        displayName: Publish package 
      - ${{ if parameters.sonarCloudServiceConnection }}:
        - task: SonarCloudAnalyze@1
          displayName: Run SonarCloud analysis
        - task: SonarCloudPublish@1
          displayName: Publish SonarCloud result
          enabled: ${{ parameters.sonarCloudPublish }}
